
import React, { useState, useRef } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Mail } from "lucide-react";
import { Button } from '@/components/ui/button';
import { Form } from '@/components/ui/form';
import { toast } from "@/hooks/use-toast";
import { useQuoteManagement } from '@/hooks/useQuoteManagement';
import { useNavigate } from 'react-router-dom';
import { useAddressAutocomplete } from '@/components/pickup-form/useAddressAutocomplete';
import { deliveryFormSchema, type DeliveryFormValues } from './delivery-form/deliveryFormSchema';
import { Quote } from '@/types/order';
import ContactSection from './delivery-form/ContactSection';
import DeliveryDetailsSection from './delivery-form/DeliveryDetailsSection';
import SuccessMessage from './delivery-form/SuccessMessage';
import MapSection from './pickup-form/MapSection';

interface DeliveryFormProps {
  onPrevious: () => void;
  vehicleData: {
    pickupAddress: string;
    deliveryAddress: string;
    vehicles: any[];
    priceHT: number;
  };
}

const DeliveryForm = ({ onPrevious, vehicleData }: DeliveryFormProps) => {
  const [isSubmitted, setIsSubmitted] = useState(false);
  const { saveQuote } = useQuoteManagement();
  const navigate = useNavigate();
  const addressInputRef = useRef<HTMLInputElement>(null);
  
  const form = useForm<DeliveryFormValues>({
    resolver: zodResolver(deliveryFormSchema),
  });

  useAddressAutocomplete(addressInputRef, form);

  const onSubmit = async (data: DeliveryFormValues) => {
    try {
      const quoteData: Quote = {
        id: crypto.randomUUID(),
        quote_number: '', // Will be generated by DB
        pickupAddress: vehicleData.pickupAddress,
        deliveryAddress: data.address,
        vehicles: vehicleData.vehicles,
        totalPriceHT: vehicleData.priceHT,
        totalPriceTTC: vehicleData.priceHT * 1.2,
        distance: typeof vehicleData.distance === 'string' ? parseFloat(vehicleData.distance) : 0,
        status: 'pending',
        dateCreated: new Date()
      };

      await saveQuote(quoteData);
      
      toast({
        title: "Devis envoyé",
        description: "Votre devis a été envoyé avec succès",
      });
      
      navigate("/dashboard/client/pending-quotes");
    } catch (error) {
      console.error('Error saving quote:', error);
      toast({
        variant: "destructive",
        title: "Erreur",
        description: "Une erreur est survenue lors de l'envoi du devis",
      });
    }
  };

  if (isSubmitted) {
    return <SuccessMessage />;
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <h2 className="text-2xl font-bold text-dk-navy mb-6">Coordonnées de livraison</h2>
        
        <ContactSection form={form} />
        <DeliveryDetailsSection form={form} addressInputRef={addressInputRef} />
        <MapSection />

        <div className="flex justify-between mt-6">
          <Button 
            type="button" 
            variant="outline"
            onClick={onPrevious}
            className="bg-white"
          >
            RETOUR
          </Button>
          <Button type="submit" className="bg-[#1a237e] hover:bg-[#3f51b5]">
            ENVOYER
            <Mail className="ml-2 h-4 w-4" />
          </Button>
        </div>
      </form>
    </Form>
  );
};

export default DeliveryForm;
